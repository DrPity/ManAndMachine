// class WatchDogA extends Thread{

// boolean running;           // Is the thread running?  Yes or no?
// boolean pulseMeterIsInstanciated;
// boolean isPulseMeterLost;
// boolean newPmDataAvailable;
// boolean synchBitFound = false;
// long    heartBeatP;
// PApplet p;
// int wait;                  // How many milliseconds should we wait in between executions?
// String id;                 // Thread name
 
// // ------------------------------------------------------------------------------------

//   // Constructor, create the thread
//   // It is not running by default
//   WatchDogA (int _w, String _s, PApplet _p) {
//     wait = _w;
//     p = _p;
//     running = false;
//     pulseMeterIsInstanciated = false;
//     newPmDataAvailable = false;
//     isPulseMeterLost = false;
//     id = _s;
//   }

// // ------------------------------------------------------------------------------------
 
//   // Overriding "start()"
//   void start () {
//     running = true;
//     println("Starting thread (will execute every " + wait + " milliseconds.)");
//     pulseMeterInit();
//     super.start();
//   }
 
// // ------------------------------------------------------------------------------------
 
//   // We must implement run, this gets triggered by start()
//   void run () {
//     while (running) {
//       check();
//       checkHeartBeat();
//       sleep(wait);
   
//     }
//     System.out.println(id + " thread is done!");  // The thread is done when we get to the end of run()
//     quit();
//   }

// // ------------------------------------------------------------------------------------
 
//   void check(){

//   	if (!pulseMeterIsInstanciated){
//   		sleep(2000);
//   		pulseMeterInit();
//   	}else if(pulseMeterIsInstanciated && isPulseMeterLost){
//   		sleep(1000);
//   		pulseMeter.stop();
//   		pulseMeterInit();
//   	}

//   }

// // ------------------------------------------------------------------------------------
 
//   // Our method that quits the thread
//   void quit() {
//     System.out.println("Quitting."); 
//     running = false;  // Setting running to false ends the loop in run()
//     // IUn case the thread is waiting. . .
//     interrupt();
//   }

// // ------------------------------------------------------------------------------------

//   void sleep(int sleepTime){
// 	try {
// 	    sleep((long)(sleepTime));
// 	  } catch (Exception e) {
// 	  }

//   }

// // ------------------------------------------------------------------------------------

//   void checkHeartBeat(){
// 	  if(millis() -  heartBeatP >= 5000 && pulseMeterIsInstanciated){
// 	    println("heartBeatP lost");
// 	    isPulseMeterLost = true;
// 	  }
//   }



// 	// String id;                 // Thread name
// 	// PApplet p;                // counter
// 	// boolean isWatchDogRunning;
// 	// WatchDog(String _id, PApplet _p){

// 	//     id = _id;
// 	//     p = _p;

// 	// }

// 	// // Overriding "start()"
// 	// void start () {
// 	// 	frameRate(60);
// 	// 	isWatchDogRunning = true;
// 	// 	checkSerialPorts();
// 	// 	pulseMeter();
// 	// 	arduino();
// 	// 	// Do whatever start does in Thread, don't forget this!
// 	// 	super.start();
// 	// }


// 	// // We must implement run, this gets triggered by start()
// 	// void run () {
// 	// 	println("Thread running");
// 	// 	while(isWatchDogRunning){	

// 	// 		if(isPulseMeterLost){
// 	// 			println("In Scheisse Pulse");
// 	// 		  pulseMeter();
// 	// 		}

// 	// 		if(isArduinoLost){
// 	// 			println("In Scheisse Arduino");
// 	// 		  arduino();
// 	// 		}

// 	// 	}

// 	// System.out.println(id + " thread is done!");  // The thread is done when we get to the end of run()	
// 	// quit();
// 	// }


// 	void pulseMeterInit() {
// 	  if(isPulseMeterPort){ 
// 	    try {
// 	      pulseMeter = new Serial(p, pulseMeterPort, 115200);
// 	      pulseMeter.clear();
// 	      pulseMeterIsInstanciated = true;
// 	      isPulseMeterLost = false;
// 	      println("pulse whatever");
// 	    } 
// 	    catch (Exception e) {
// 	      println(e);
// 	      pulseMeterIsInstanciated = false;
// 	      isPulseMeterLost = true;
// 	      println("PulseMeter port received an exepction: " + e);
// 	    }
// 	  } 
// 	}

// }	

// 	// void arduino() {
// 	// 	if(isArduinoPort){ 
// 	// 	    try {
// 	// 	      myPort = new Serial(p, arduinoPort, 115200);
// 	// 	      myPort.bufferUntil(end);
// 	// 	      myPort.clear();
// 	// 	      arduinoIsInstanciated = true;
// 	// 	      isArduinoLost = false;
// 	// 	    } 
// 	// 	    catch (Exception e) {
// 	// 	      println("Arduino not available: " + e);
// 	// 	      isArduinoPort = false; 
// 	// 	    }
// 	// 	}
// 	// }


// 	// 	  // Our method that quits the thread
// 	//  void quit() {
// 	//     System.out.println("Quitting Thread"); 
// 	//     isWatchDogRunning = false;
// 	//     // IUn case the thread is waiting. . .
// 	//     interrupt();
// 	// }